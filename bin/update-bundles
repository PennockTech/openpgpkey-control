#!/bin/bash -eu
# Do not use $_ to set ScriptPath, since script runners such as 'task' don't
# change $_ before running the commands.
# We do want a _resolved_ path to the script.
ScriptPath="$0"
StartDir="$(pwd)"
case "$ScriptPath" in
	/*) true ;;
	./*) ScriptPath="${StartDir}/${ScriptPath#./}" ;;
	*) ScriptPath="${StartDir}/${ScriptPath}" ;;
esac
readonly StartDir ScriptPath

readonly ProgramName="$(basename "$0" .sh)"
# nb: ScriptPath changes to the interpreter if invoked manually
readonly TopDir="$(cd "$(dirname "$0")"; cd ..; pwd)"

note() { printf >&2 '%s: %s\n' "$ProgramName" "$*"; }
die() { note "$@"; exit 1; }

: "${GNUPGHOME:=$HOME/.gnupg}"
readonly initial_GNUPGHOME="$GNUPGHOME"

cd "$TopDir/config"
bundle_files=( bundle.* )
cd ..

[[ "${#bundle_files[@]}" -gt 0 ]] || die "no bundles defined"
if [[ "${#bundle_files[@]}" -eq 1 ]] && [[ "${bundle_files[0]}" == 'bundle.*' ]]; then
	if [[ -n "${OPENPGPKEY_NO_BUNDLES_OKAY:-}" ]]; then
		note "no bundles defined, exiting okay per environmental request"
		exit 0
	fi
	die "no bundles defined"
fi

rm -rf "$TopDir/bundles"
mkdir -pv "$TopDir/bundles"

# mktemp portability, still a thing in 2020.
dumpsdir="$(mktemp -d "${TMPDIR:-/tmp}/bundle-dumps.XXXXXXXX")" || die "failed to create a temp dir"
remove_tmp() { rm -rf -- "$dumpsdir"; }
trap remove_tmp EXIT INT TERM

# Each bundle is self-contained with full cross-sigs, where applicable.
# The versions we've dumped into keys are minimal, lacking the cross-sigs,
# and we don't necessarily have all the bundle keys in this repo.
# So this works directly from your local keyring.
update_one_bundle() {
	local bundleconf bundlesrc bundlename bundleout bundleeachdir
	local tmp src ghome kf
	local -a keys thirdparty_files third_keys
	bundleconf="${1:?need a bundle.foo file}"
	bundlesrc="$TopDir/config/$bundleconf"
	bundlename="${bundle#bundle.}"
	bundleout="$TopDir/bundles/${bundlename}.asc"
	bundleeachdir="$TopDir/bundles/each-${bundlename}"
	thirdparty_files=(
		"$TopDir/config/thirdparty.$bundlename"
		"$TopDir/config/thirdparty.ALL"
	)
	tmp="$dumpsdir/$bundlename"
	mkdir -m 0700 -- "$tmp"

	keys=($(grep '^[^#]' -- "$bundlesrc" | sed $'s/[ \t]*#.*$//' | sort -u))
	third_keys=()
	for kf in "${thirdparty_files[@]}"; do
		test -f "$kf" || continue
		third_keys+=($(grep '^[^#]' -- "$kf" | sed $'s/[ \t]*#.*$//' | sort -u))
	done

	for key in "${keys[@]}"; do
		src="$TopDir/keyrings/cross-signed/${key}.asc"
		test -f "$src" || continue
		cp -- "$src" "$tmp/./"
	done
	export GNUPGHOME="$initial_GNUPGHOME"
	gpg > "$tmp/from-local-keyring.asc" \
		-a --export-options no-export-attributes,export-clean \
		--export "${keys[@]}" "${third_keys[@]}"

	export GNUPGHOME="$tmp"
	gpg --import -- "$tmp"/*.asc

	gpg > "$bundleout" \
		-a --export-options export-clean --export "${keys[@]}"

	mkdir -- "$bundleeachdir"
	for key in "${keys[@]}"; do
		gpg > "$bundleeachdir/${key}.asc" \
			-a --export-options export-clean --export "$key"
	done

	export GNUPGHOME="$initial_GNUPGHOME"
}

for bundle in "${bundle_files[@]}"; do
	update_one_bundle "$bundle"
done

tree "$dumpsdir" 2>/dev/null || ls -lR "$dumpsdir"

cd "$TopDir/bundles"
ls -l
openssl dgst -sha256 ./*.asc | sed 's,(\./,(,'
