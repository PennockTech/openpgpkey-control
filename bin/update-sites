#!/bin/bash -eu
# Keep this first, $_ changes after first command:
readonly ScriptPath="$_"

readonly ProgramName="$(basename "$0" .sh)"
# ScriptPath instead of $0 breaks if we invoke bash on this file manually:
readonly TopDir="$(cd "$(dirname "$0")"; cd ..; pwd)"
readonly WellKnownTop='.well-known/openpgpkey'

note() { printf >&2 '%s: %s\n' "$ProgramName" "$*"; }
die() { note "$@"; exit 1; }

python='python'
if which python3 >/dev/null 2>&1; then python='python3'; fi

export PYTHONPATH="${TopDir}/lib/python${PYTHONPATH:+:}${PYTHONPATH:-}"

test -f "$TopDir/config/keys"     || die "missing config/keys"
test -f "$TopDir/config/domains"  || die "missing config/domains"
$python -c 1                      || die "missing python interpreter ($python)"
$python -c 'import pdpzbase32'    || die "missing python pdpzbase32 (from .personal)"

test -d "$TopDir/sites"           || die "missing sites dir"
rm -rf "$TopDir/sites"
mkdir -pv "$TopDir/sites"

readonly Keys=($(grep '^[^#]' "$TopDir/config/keys"))
readonly Domains=($(grep '^[^#]' "$TopDir/config/domains"))

for domain in "${Domains[@]}"; do
	for wellknown in "$WellKnownTop/$domain" "$WellKnownTop"; do
		d="$TopDir/sites/$domain/$wellknown"
		mkdir -pv "$d/hu"
		touch "$d/policy"
	done
	cat >"$TopDir/sites/$domain/index.html" <<EOHTML
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>No web-pages</title></head><body>
<p>No content on this site should be a web-page.<br>
(Except, by reduction, this one.)</p>
<p>This small website exists for <a href="https://datatracker.ietf.org/doc/draft-koch-openpgp-webkey-service/?include_text=1">OpenPGP Web Key Directory</a> (aka WKD).</p>
<p>Given the email address <tt>example@${domain}</tt>, this site allows this next command to work:<br>
<tt>gpg --locate-external-keys example@${domain}</tt></p>
<p>WKD is also used by some graphical applications, and some web-based applications; appropriate URLs should have CORS rules permitting full read access.</p>
</body></html>
EOHTML
done

# emails_from_colon_listing():
# On stdin, `gpg --with-colons` listing with uid lines
# On stdout, the email addresses therein, unordered with dups.
if which pcregrep >/dev/null 2>&1; then
  emails_from_colon_listing() { grep '^uid:' | cut -d : -f 10 | pcregrep -o1 '<([^@>]+@[^>]+)>'; }
else
  # Well, we'll be about to cause a Python interpreter to be paged in anyway.
  emails_from_colon_listing() { $python -c '
import re, sys
extract = re.compile(r"<([^@>]+@[^>]+)>")
for fields in [line.split(":") for line in sys.stdin]:
    if fields[0] == "uid":
        m = extract.search(fields[9])
        if m is not None:
          print(m.group(1))
'
  }
fi

for key in "${Keys[@]}"; do
	# quiet for `please do a --check-trustdb` warnings
	emails=($(
		gpg --quiet --batch --with-colons --import-options show-only \
			--import "keyrings/minimal/${key}.asc" |
			emails_from_colon_listing |
			sort -u
		))
	note "Key $key emails: ${emails[*]}"

	for email in "${emails[@]}"; do
		domain="${email##*@}"
		lhs="${email%@*}"
		# Filter out domains which we're not handling here
		test -d "$TopDir/sites/$domain" || continue

		encoded_lhs="$($python -c '
import hashlib, sys, pdpzbase32
print(pdpzbase32.encode(hashlib.sha1(sys.argv[1].lower().encode("ASCII")).digest()).decode("ASCII"))' "$lhs")"
		note "[$key] $email -> $domain :: $lhs :: $encoded_lhs"

		for wellknown in "$WellKnownTop/$domain" "$WellKnownTop"; do
			d="$TopDir/sites/$domain/$wellknown/hu"
			touch "$d/$encoded_lhs"
			gpg --dearmor < "keyrings/cross-signed/${key}.asc" >> "$d/$encoded_lhs"
		done
	done
done
